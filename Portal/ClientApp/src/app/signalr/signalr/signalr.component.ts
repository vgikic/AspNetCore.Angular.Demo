import * as signalR from "@aspnet/signalr"
import { ItemDto } from "../../_autogenerated/itemDto";
import { ClientDto } from "../../_autogenerated/clientDto";
import { SnackBarService } from "../../services/snackbar.service";
import { Component, OnInit, Inject, OnDestroy } from '@angular/core';

@Component({
  selector: 'app-signalr',
  templateUrl: './signalr.component.html',
  styleUrls: ['./signalr.component.scss']
})
export class SignalrComponent implements OnInit, OnDestroy {

  private connection: signalR.HubConnection;

  constructor(
    private sb: SnackBarService,
    @Inject('BASE_URL') public baseUrl: string,
  ) { }

  public lastUpdatedItem: ItemDto;
  public connectedClients: Array<ClientDto> = [];

  ngOnInit() {
    this.setupConnection();
  }

  ngOnDestroy(): void {
    this.connection.stop();
  }

  private setupConnection = () => {
    this.connection = new signalR.HubConnectionBuilder()
      .withUrl(`${this.baseUrl}itemhub`)
      .build();

    this.connection.on('ItemUpdate', (item: ItemDto) => {
      this.lastUpdatedItem = item;
    });

    this.connection.on('GetAllClients', (clients: [ClientDto]) => {
      this.connectedClients = clients;
    });

    this.connection.on('ClientConnected', (client: ClientDto) => {
      this.connectedClients.push(client);
      this.sb.success(`New client connected ${client.id}!`);
    });

    this.connection.on('ClientDisconnected', (client: ClientDto) => {
      this.connectedClients = this.connectedClients.filter(c => c.id !== client.id);
      this.sb.error(`Client ${client.id} disconnected!`);
    });

    this.connection.on('finished', () => this.connection.stop());

    this.connection.start()
      .catch(error => console.log(error));

  }

}
