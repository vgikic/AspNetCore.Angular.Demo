import * as $ from 'jquery';
import query from 'devextreme/data/query';
import { Router } from '@angular/router';
import dxDataGrid from "devextreme/ui/data_grid";
import DevExpress from 'devextreme/bundles/dx.all';
import { ItemDto } from '../../_autogenerated/itemDto';
import { PartDto } from '../../_autogenerated/partDto';
import { DxDataGridComponent } from 'devextreme-angular';
import { ItemService } from '../../services/item.service';
import { Component, OnInit, ViewChild } from '@angular/core';
import { createStore } from 'devextreme-aspnet-data-nojquery';
import { ItemsApiService } from '../../_autogenerated/itemsApi.service';
import { createDxDataGridOptions } from '../../helpers/devextreme/options';

@Component({
  selector: 'app-items',
  templateUrl: './items.component.html',
  styleUrls: ['./items.component.scss']
})
export class ItemsComponent implements OnInit {

  @ViewChild(DxDataGridComponent) dataGrid: DxDataGridComponent;

  private parts: PartDto[] = [];

  constructor(
    private router: Router,
    private itemService: ItemService,
    private itemsApiService: ItemsApiService
  ) { }

  ngOnInit(): void {
    this.itemService.getParts().subscribe(parts => this.parts = parts);
    dxDataGrid.defaultOptions({
      options: createDxDataGridOptions({ columns: this.columns }, this.itemsApiService.Url_GetItemsOverview())
    })
  }

  private columns =
    [
      {
        dataField: 'id',
        dataType: 'number',
        width: 100,
        alignment: 'left'
      },
      {
        dataField: 'name',
        dataType: 'string',
      },
      {
        dataField: 'email',
        dataType: 'string',
      },
      {
        dataField: 'from',
        dataType: 'date',
      },
      {
        dataField: 'to',
        dataType: 'date',
      },
      {
        dataField: 'categoryId',
        dataType: 'number',
        caption: 'Category',
        lookup: {
          dataSource: createStore({
            key: "id",
            loadUrl: this.itemsApiService.Url_GetCategoriesForLookup(),
          }),
          displayExpr: "name",
          valueExpr: "id",
        },
      },
      {
        dataField: 'parts',
        dataType: 'string',
        allowFiltering: false,
        allowSorting: false,
        allowSearch: false,
        calculateDisplayValue: (itemDto: ItemDto) => {
          const filterExpression = [];
          for (let i = 0; i < itemDto.parts.length; i++) {
            if (i > 0) {
              filterExpression.push('or');
            }
            filterExpression.push(['id', itemDto.parts[i]]);
          };
          return $.map(query(this.parts).filter(filterExpression).toArray(), (item: PartDto) => item.name).join(', ');
        },
      },
      {
        dataField: 'isActive',
        caption: 'Active',
        dataType: 'boolean',
        width: 200
      },
      {
        dataField: undefined,
        caption: "Actions",
        width: 260,
        cellTemplate: (container, options) => {
          const item: ItemDto = options.data;
          const del = `<button class="dx-button table-btn delete">Delete</button>&nbsp;`;
          const edit = `<button class="dx-button table-btn edit">Edit</button>&nbsp;`;

          const idStr = `id-${item.id}`;
          $(`<div id="${idStr}">${del}${edit}</div>`).appendTo(container);
          $(`#${idStr} .delete`).click((e) => this.deleteItem(item.id));
          $(`#${idStr} .edit`).click((e) => this.router.navigate([`item/edit/${item.id}`]));
        },
      }
    ] as Array<DevExpress.ui.dxDataGridColumn>

  private deleteItem = (id: number) => {
    this.itemService.deleteItem(id).subscribe(response => this.dataGrid.instance.refresh());
  }
}


