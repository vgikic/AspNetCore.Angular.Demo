import { Observable } from 'rxjs';
import { DatePipe } from '@angular/common';
import { ItemDto } from '../../_autogenerated/itemDto';
import { Router, ActivatedRoute } from '@angular/router';
import { DataService } from '../../services/data.service';
import { addDays } from '../../helpers/forms/date-helper';
import { ItemService } from '../../services/item.service';
import { Component, OnInit, ViewChild } from '@angular/core';
import { FormGroup, FormBuilder, FormArray } from '@angular/forms';
import { ReusableComponent } from '../../shared/reusable/reusable.component';

@Component({
  templateUrl: './angular-examples.component.html',
  styleUrls: ['./angular-examples.component.scss']
})
export class AngularExamplesComponent implements OnInit {

  // 'DATA BINDING' - PROPERTIES
  public expr = () => '{{}}';
  public title = 'This Is Some Text ';
  public fontColor = 'red';
  private _filter = '';
  public numbers = ['One', 'Two', 'Three', 'OneTwo', 'TwoOne'];
  public filteredNumbers = this.numbers.slice();
  public isShowing = false;
  public statuses = [1, 2, 3];
  public selectedStatus = 1;

  // 'ROUTING & NAVIGATION' - PROPERTIES
  public bgColor = '';
  public routeData;
  private _canActivateItemsRoute: boolean;
  public canDeactivate = true;

  // 'DYNAMIC FORMS' - PROPERTIES
  public dynamicFg: FormGroup;


  // 'COMPONENT COMMUNICATION' - PROPERTIES
  @ViewChild('childRef') childRef: ReusableComponent;

  // 'PIPES' - PROPERTIES
  public price = 12.5678;
  public obj = {
    id: 1,
    email: 'stevo.stevic@yahoo.com',
    address: 'Stevanovci'
  };
  public today = new Date();
  public text = '  T h is  se nt e nc e h  as to  m a ny s pa ces  ';
  public item$: Observable<ItemDto>;

  constructor(
    private router: Router,
    private dataService: DataService,
    private fb: FormBuilder,
    private itemsService: ItemService,
    private activatedRoute: ActivatedRoute
  ) { }

  ngOnInit() {
    this.activatedRoute.queryParamMap.subscribe(queryParams => {
      this.bgColor = queryParams["params"]["bgColor"];
    });
    this.activatedRoute.paramMap.subscribe(params => {
      if (!params) {
        this.bgColor = ''
      };
    });
    this._canActivateItemsRoute = this.dataService.canActivateRoute;
    this.activatedRoute.data.subscribe(data => this.routeData = data);

    this.intForm();
    this.item$ = this.itemsService.getItem(1);

  }

  // 'COMPONENT COMMUNICATION' - FUNCTIONS
  public handleEventEmittedByChild = (payload: string) => {
    alert(payload);
  }

  public callChildFunction = () => {
    this.childRef.alertUser();
  }

  public getCategoriesControl = () => <FormArray>this.dynamicFg.get('categories');

  // 'DATA BINDING' - FUNCTIONS
  public interpopationFunctionExample = () => `${this.title} From Function`;
  public onBtnClick = () => alert("GOOD JOB!");

  get filter(): string {
    return this._filter;
  }
  set filter(val: string) {
    this._filter = val;
    if (val) {
      this.filteredNumbers = this.numbers.filter(n => n.toLocaleLowerCase().includes(val.toLocaleLowerCase()));
    } else {
      this.filteredNumbers = this.numbers.slice();
    }
  }

  // 'ROUTING & NAVIGATION' - FUNCTIONS
  public programmaticBasicNavigation = () => this.router.navigate(['/home']);

  public programmaticQueryParams = () => this.router.navigate(['/angular/example'], {
    queryParams: { bgColor: '#2e7209' }
  });

  set canActivateItemsRoute(val: boolean) {
    this.dataService.canActivateItemsRoute$.next(val);
    this._canActivateItemsRoute = val;
  }

  get canActivateItemsRoute() {
    return this._canActivateItemsRoute;
  }


  // 'DYNAMIC FORMS' - FUNCTIONS
  private intForm = () => {
    this.dynamicFg = this.fb.group({
      categories: this.fb.array([]),
    });
  }

  public addCategory = () => {
    const control = this.getCategoriesControl();
    if (control.length < 10) {
      const group = this.fb.group({
        id: 0,
        text: [''],
        items: this.fb.array([this.createItemsFg()])
      });
      control.push(group);
    }
  }

  public createItemsFg = (): FormGroup => {
    return this.fb.group({
      id: 0,
      text: [''],
    });
  }

  public removeItem(i: number, items: FormArray) {
    items.removeAt(i);
  }

  public removeCategory(i: number) {
    this.getCategoriesControl().removeAt(i);
  }

  public addItem = (items: FormArray) => {
    if (items.controls.length < 10) {
      const fg = this.createItemsFg();
      items.push(fg);
    }
  }


  // 'PIPES' - FUNCTIONS
  public formatDateProgrammatically = () => {
    const datePipe = new DatePipe('hr-HR');
    return `Sastanak je poƒçeo ${datePipe.transform(this.today, 'mediumDate')} u ${datePipe.transform(this.today, 'mediumTime')} i trajao je do ${datePipe.transform(addDays(this.today, 5), 'mediumDate')}`;
  }

}
