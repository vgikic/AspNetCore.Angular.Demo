import { Injectable } from "@angular/core";
import { Observable, throwError } from "rxjs";
import { tap, catchError } from "rxjs/operators";
export { tap, catchError } from 'rxjs/operators';
import { HttpRequest, HttpHandler, HttpEvent, HttpEventType, HttpErrorResponse, HttpInterceptor } from "@angular/common/http";
import { ItemsApiService } from "../../_autogenerated/itemsApi.service";


@Injectable({ providedIn: 'root' })
export class SpinnerInterceptorService implements HttpInterceptor {

  private visibleSpinner = true;
  private spinnerElement = document.getElementById('loader');
  private spinnerClassName = 'visible';
  private static spinnerCount = 0;
  private removeBaseUrl = (url: string) => url.split(this.itemApiService.baseUrl)[1];

  constructor(
    private itemApiService: ItemsApiService) { }

  private apiCallsWithoutSpinner = [
    this.itemApiService.Url_GetItemsOverview()
  ].map(url => this.removeBaseUrl(url));

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    this.visibleSpinner = !this.apiCallsWithoutSpinner.find(url => this.removeBaseUrl(url) === this.removeBaseUrl(req.url));
    this.showSpinner();
    return next.handle(req)
      .pipe(
        tap
          (event => {
            if (event.type === HttpEventType.Response) {
              this.hideSpinner();
            }
          }),
        catchError((err: HttpErrorResponse, caught) => {
          this.hideSpinner();
          return throwError(err);
        }))
  }
  public hideSpinner = () => {
    if (this.setSpinnerElement() && this.visibleSpinner && ((--SpinnerInterceptorService.spinnerCount) <= 0)) {
      this.spinnerElement.classList.remove(this.spinnerClassName);
    }
  }

  public showSpinner = () => {
    if (this.setSpinnerElement() && this.visibleSpinner) {
      ++SpinnerInterceptorService.spinnerCount;
      this.spinnerElement.classList.add(this.spinnerClassName);
    }
  }

  public setSpinnerElement = () => {
    if (!this.spinnerElement) {
      this.spinnerElement = document.getElementById('loader');
    }
    return this.spinnerElement;
  }

}
