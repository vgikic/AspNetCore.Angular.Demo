import { of } from "rxjs";
import { map } from "rxjs/operators";
import { Injectable } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { ItemDto } from "../_autogenerated/itemDto";
import { PartDto } from "../_autogenerated/partDto";
import { IJsonPatchObject } from "../models/interfaces";
import { CategoryDto } from "../_autogenerated/categoryDto";
import { ResponseDto } from "../_autogenerated/responseDto";
import { ItemBindingModel } from "../_autogenerated/itemBindingModel";
import { ItemsApiService } from "../_autogenerated/itemsApi.service";

@Injectable({ providedIn: 'root' })
export class ItemService {

    public parts: PartDto[];
    public categories: CategoryDto[];

    constructor(
        private httpClient: HttpClient,
        private itemApiService: ItemsApiService) {
    }

    public getItem = (id: number) =>
        this.httpClient.get<ItemDto>(this.itemApiService.Url_GetItem(id));

    public deleteItem = (id: number) =>
        this.httpClient.delete(this.itemApiService.Url_DeleteItem(id));

    public updateItem = (model: Array<IJsonPatchObject>, id: number) =>
        this.httpClient.patch(this.itemApiService.Url_UpdateItem(id), model);

    public createItem = (model: ItemBindingModel) =>
        this.httpClient.post(this.itemApiService.Url_CreateItem(), model);

    public validateEmail = (email: string, id: number) =>
        this.httpClient.get(this.itemApiService.Url_IsEmailUnique(email, id));

    public getItems = () =>
        this.httpClient.get<ItemDto[]>(this.itemApiService.Url_GetItems());

    public getBadRequest = () =>
        this.httpClient.get(this.itemApiService.Url_GetBadRequest());

    public getDataForAuthorizedUsers = () =>
        this.httpClient.get<ResponseDto>(this.itemApiService.Url_GetDataForAuthorizedUsers());

    public getDataForAdmins = () =>
        this.httpClient.get<ResponseDto>(this.itemApiService.Url_GetDataForAdmins());

    public getDataForSupport = () =>
        this.httpClient.get<ResponseDto>(this.itemApiService.Url_GetDataForSupport());

    public tryGettingUnattainableData = () =>
        this.httpClient.get<ResponseDto>(this.itemApiService.Url_TryGettingUnattainableData());

    public getCategories = () => {
        if (this.categories) {
            return of(this.categories);
        }
        return this.httpClient.get<CategoryDto[]>(this.itemApiService.Url_GetCategoriesForLookup())
            .pipe(
                map(categories => {
                    this.categories = categories;
                    return categories;
                })
            )
    }

    public getParts = () => {
        if (this.parts) {
            return of(this.parts);
        }
        return this.httpClient.get<PartDto[]>(this.itemApiService.Url_GetPartsForLookup())
            .pipe(
                map(parts => {
                    this.parts = parts;
                    return parts;
                })
            )
    }
}