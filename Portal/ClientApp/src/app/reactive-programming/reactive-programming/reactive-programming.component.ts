import { Subscription } from 'rxjs';
import { Actions } from '@ngrx/effects';
import { getItems } from '../state/index'
import { Store, select } from '@ngrx/store';
import { ItemsState } from '../state/reducer';
import { ItemDto } from '../../_autogenerated/itemDto';
import { Component, OnInit, OnDestroy } from '@angular/core';
import { SnackBarService } from '../../services/snackbar.service';
import { Load, SetSelectedItem, GetById, GetBadRequest } from '../state/actions'

@Component({
  selector: 'app-reactive-programming',
  templateUrl: './reactive-programming.component.html',
  styleUrls: ['./reactive-programming.component.scss']
})
export class ReactiveProgrammingComponent implements OnInit, OnDestroy {

  public items: ItemDto[];
  private subscriptions: Subscription[] = [];
  
  constructor(
    private sbService: SnackBarService,
    private store: Store<ItemsState>,
  ) { }

  ngOnInit() {
    this.subscribeToGetItems();
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }

  public subscribeToGetItems = () => {
    const subscription = this.store.pipe(select(getItems))
      .subscribe(items => this.items = items);

    this.subscriptions.push(subscription);
  }

  public dispatchLoadAction = () => {
    this.store.dispatch(new Load());
  }

  public dispatchGetBadRequestAction = () => {
    this.store.dispatch(new GetBadRequest());
  }

  public setSelectedItem = (id: number) => {
    this.store.dispatch(new GetById(id));
  }

}
